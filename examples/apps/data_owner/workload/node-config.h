#pragma once

#include <map>
#include "cfl-poc-defs.h"
#include "data-owner-node-config.h"
#include "requester-node-config.h"

namespace cfl {

const size_t VERIFICATION_KEY_SIZE = 88;

class NodeConfig {
public:
    NodeConfig();

    ~NodeConfig() { }

    virtual void CreateNonce(const std::vector<tcf::WorkOrderData>& in_work_order_data,
                             std::vector<tcf::WorkOrderData>& out_work_order_data,
                             ExWorkorderInfo* wo_info);

    virtual bool CheckDataOwner(ExWorkorderInfo* wo_info, ByteArray& data_owner_vkey);

    virtual bool CreateNonce(const ByteArray& data_owner_vkey, ByteArray& nonce);

    virtual bool CheckNonce(const ByteArray& nonce, const ByteArray& data_owner_vkey);

    virtual void AddNonce(int index, std::vector<tcf::WorkOrderData>& out_work_order_data,  const ByteArray& data_owner_vkey);

private:

    std::map<ByteArray, ByteArray> nonce_map;
    std::map<ByteArray, int> data_owner_vkeys;

    const uint8_t data_owner_verification_keys[3][VERIFICATION_KEY_SIZE] =
        {
            {0x30, 0x56, 0x30, 0x10, 0x06, 0x07, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x02, 0x01, 0x06, 0x05, 0x2b, 0x81, 0x04, 0x00, 0x0a, 0x03, 0x42,
             0x00, 0x04, 0x42, 0xc6, 0xd8, 0x0e, 0xf8, 0xe0, 0x18, 0x0a, 0xd3, 0xba, 0x61, 0x95, 0xf2, 0x50, 0xdd, 0xdb, 0xb9, 0x5f, 0x1c, 0x0f,
             0xe5, 0xf3, 0xb5, 0x6f, 0xe1, 0xb1, 0x9d, 0x7f, 0xd4, 0x9f, 0x3d, 0xe3, 0x23, 0x6d, 0x39, 0xa5, 0x3b, 0xa3, 0xf4, 0xd5, 0x98, 0xaa,
             0xb6, 0x47, 0x27, 0x99, 0xb8, 0xa2, 0xf6, 0xe6, 0x51, 0x6a, 0x81, 0x57, 0xe6, 0xb4, 0x2c, 0x75, 0x53, 0xf6, 0x12, 0xe6, 0x5e, 0x8a},

	    {0x30, 0x56, 0x30, 0x10, 0x06, 0x07, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x02, 0x01, 0x06, 0x05, 0x2b, 0x81, 0x04, 0x00, 0x0a, 0x03, 0x42, 
	     0x00, 0x04, 0x25, 0xe6, 0x95, 0x65, 0x4e, 0x2d, 0x17, 0x05, 0x32, 0x2f, 0xf9, 0x77, 0x1d, 0x40, 0xfc, 0x15, 0xa2, 0x09, 0xab, 0x8a, 
	     0xbf, 0xa4, 0x9d, 0xc9, 0x72, 0x29, 0xdf, 0x60, 0xb0, 0x0c, 0xf6, 0x18, 0xf1, 0x75, 0x9f, 0x10, 0x3c, 0xff, 0x6b, 0x05, 0x56, 0xa1, 
	     0xa3, 0x35, 0x0f, 0x41, 0xef, 0xfd, 0x8d, 0xea, 0x13, 0x8f, 0x3a, 0x20, 0xa2, 0xd0, 0x14, 0x27, 0x16, 0x61, 0xe6, 0x47, 0xa1, 0x05},

	    {0x30, 0x56, 0x30, 0x10, 0x06, 0x07, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x02, 0x01, 0x06, 0x05, 0x2b, 0x81, 0x04, 0x00, 0x0a, 0x03, 0x42, 
	     0x00, 0x04, 0x51, 0x1b, 0xb8, 0x09, 0x87, 0xb2, 0x0f, 0xdf, 0xa2, 0x51, 0xa9, 0x4d, 0x5e, 0x7c, 0xd2, 0xf2, 0xa6, 0x35, 0x52, 0xe2, 
	     0x5f, 0x84, 0x27, 0xea, 0xbc, 0x1f, 0x25, 0x4f, 0xd7, 0x88, 0x53, 0xd3, 0xf5, 0x12, 0xbb, 0x75, 0xad, 0xcf, 0x79, 0xce, 0xc1, 0x5a, 
	     0xdf, 0x8c, 0xfa, 0xcc, 0x08, 0xdb, 0x43, 0xd6, 0x1d, 0x5e, 0x3f, 0xb1, 0x63, 0x46, 0xdd, 0x80, 0x77, 0xdb, 0x6c, 0x46, 0x4b, 0x78}
        };

};

} //namespace cfl
