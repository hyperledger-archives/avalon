# Copyright 2020 Intel Corporation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from abc import ABC, abstractmethod


class WorkOrderConnector(ABC):
    """
    This is an abstract base class that contains
    abstract APIs to manage work orders
    """

    def __init__(self):
        super().__init__()

    @abstractmethod
    def work_order_complete(self, work_order_id, work_order_response):
        """
        This function is called by the Worker Service to
        complete a Work Order successfully or in error.
        work_order_id is unique id to identify the work order request
        work_order_response is the Work Order response data in string
        """
        pass

    @abstractmethod
    def encryption_key_set(self, worker_id, tag, nonce,
                           signature, id=None):
        """
        Set Encryption Key Request Payload
        Inputs
        1. worker_id is an id of the worker to retrieve an encryption key for.
        2. tag is tag that should be associated with the returned key,
        3. nonce is a nonce associated with the key.
        e.g. requester id. This is an optional parameter. If it is not
        provided, requesterId below is used as a key.
        4.signature is a signature generated by the worker on the worker_id, tag
        nonce.
        Returns
            error code is the result of the operation.
            Values are defined in encryption_key_retrieve()
        """

