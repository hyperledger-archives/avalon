import org.apache.tools.ant.filters.ReplaceTokens

buildscript {
    ext {
        springBootVersion = '2.0.5.RELEASE'
    }
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

plugins {
    id "org.sonarqube" version "2.7"
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'maven'
apply plugin: 'jacoco'

group = 'com.iexec.worker'
sourceCompatibility = 1.8

repositories {
    mavenCentral()
    jcenter()
    maven {
        url "https://nexus.iex.ec/repository/maven-public/"
    }
    maven {
        url "https://jitpack.io"
    }
}

configurations {
    deployerJars
}


ext {
    springCloudVersion = 'Finchley.RELEASE'
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

dependencies {
    // iexec
    compile "com.iexec.common:iexec-common:$iexecCommonVersion"
    // compile files("../iexec-common/build/libs/iexec-common-${iexecCommonVersion}.jar")

    // spring
    compile "org.springframework.boot:spring-boot-starter"
    compile "org.springframework.boot:spring-boot-starter-web"
    compile "org.springframework.boot:spring-boot-starter-websocket"
    compile "org.springframework.boot:spring-boot-starter-actuator"
    compile "org.springframework.cloud:spring-cloud-starter"
    compile "org.springframework.cloud:spring-cloud-starter-openfeign"
    compile "org.springframework.retry:spring-retry"
    testCompile "org.springframework.boot:spring-boot-starter-test"

    //docker-client
    compile 'com.spotify:docker-client:8.13.1'
    compile 'org.glassfish.jersey.inject:jersey-hk2:2.26'
    compile 'org.glassfish.jersey.bundles.repackaged:jersey-guava:2.25.1'
    compile 'javax.activation:activation:1.1.1'

    // lombok
    compileOnly "org.projectlombok:lombok:1.18.2"
    annotationProcessor "org.projectlombok:lombok:1.18.2"

    // multiaddresses (IPFS)
    compile 'com.github.multiformats:java-multiaddr:1.3.1'

    // apache commons.lang3
    compile 'org.apache.commons:commons-lang3:3.6'

    // package cloud
    deployerJars "io.packagecloud.maven.wagon:maven-packagecloud-wagon:0.0.6"
}

jacoco {
    toolVersion = "0.8.1"
    reportsDir = file("$buildDir/TestCoverageReport")
}
// the test coverage report will be created just before the build
build.dependsOn jacocoTestReport

task createVersion(type: Copy) {
    // delete old one
    delete 'src/main/java/com/iexec/worker/utils/version/Version.java'
    // use and copy template to the new location
    from 'src/main/resources/Version.java.template'
    into 'src/main/java/com/iexec/worker/utils/version/'

    rename { String fileName ->
        fileName.replace('.template', '')
    }
    // replace tokens in the template file
    filter(ReplaceTokens, tokens: [projectversion: "${version}".toString()])
}
// the createVersion task should be called before compileJava or the version service will not work
compileJava.dependsOn createVersion

def gitBranch = 'git name-rev --name-only HEAD'.execute().text.trim()
def isMasterBranch = gitBranch == "master"
def canUploadArchives = isMasterBranch && project.hasProperty("nexusUser") && project.hasProperty("nexusPassword")
def gitShortCommit = 'git rev-parse --short HEAD'.execute().text.trim()
def isSnapshotVersion = project.version.contains("SNAPSHOT")

project.ext.getNexusMaven = {
    def nexusMavenBase = "https://nexus.iex.ec/repository"
    if (isSnapshotVersion) {
        return nexusMavenBase + "/maven-snapshots/"
    } else {
        return nexusMavenBase + "/maven-releases/"
    }
}

uploadArchives {
    repositories.mavenDeployer {
        configuration = configurations.deployerJars
        repository(url: getNexusMaven()) {
            authentication(userName: project.nexusUser, password: project.nexusPassword)
        }
    }
}
uploadArchives.enabled = canUploadArchives

test {
    if (System.properties['test.profile'] == 'skipDocker') {
        exclude '**/docker/**'
    }
}

def imageName = "nexus.iex.ec/iexec-worker"

project.ext.getDockerImageNameFull = {
    def imageNameWithVersion = imageName + ":${version}"
    if (isSnapshotVersion) {
        return imageNameWithVersion + "-" + gitShortCommit
    } else {
        return imageNameWithVersion
    }
}

project.ext.getDockerImageNameShortCommit = {
    return imageName + ":" + gitShortCommit
}

task prepareDockerFile(type: Copy) {
    delete 'build/main/resources/'
    from 'Dockerfile'
    into 'build/main/resources/'
    filter(ReplaceTokens, tokens: [projectversion: "${version}".toString()])
}


task buildImage(type: Exec) {
    description 'Build a docker image for the core'
    commandLine("sh", "-c", "docker image build -f build/main/resources/Dockerfile -t " + getDockerImageNameFull() + " .")
}

buildImage.dependsOn prepareDockerFile
buildImage.enabled = isMasterBranch || project.hasProperty("forceDockerBuild")

task pushImage(type: Exec) {
    if (project.hasProperty("nexusUser") && project.hasProperty("nexusPassword")) {
        commandLine("sh", "-c", "docker login -u " + project.nexusUser + " -p " + project.nexusPassword + " nexus.iex.ec && " +
                "docker push " + getDockerImageNameFull() + " && " +
                "docker tag " + getDockerImageNameFull() + " " + getDockerImageNameShortCommit() + " && " +
                "docker push " + getDockerImageNameShortCommit() + " && " +
                "docker logout")
    } else {
        println "Credentials for DockerHub are missing, the images cannot be pushed"
    }
}

pushImage.dependsOn buildImage
pushImage.enabled = isMasterBranch && project.hasProperty("nexusUser") && project.hasProperty("nexusPassword")

//gradle bootRun -PproxyHost=192.168.XX.XXX -PproxyPort=3128
project.ext.getJvmArgs = {
    if (project.hasProperty("proxyHost") && project.hasProperty("proxyPort")) {
        return ["-Dhttp.proxyHost="+project.proxyHost, "-Dhttp.proxyPort="+project.proxyPort]
    } else {
        return  []
    }
}

bootRun {
    jvmArgs = project.ext.getJvmArgs()
}
