# Copyright 2020 Intel Corporation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

[Logging]
LogLevel = "INFO"
LogFile  = "__screen__"

# -------------------------------------------------------
# EnclaveModule -- configuration of the Intel SGX Enclave
# -------------------------------------------------------
[EnclaveModule]
# Attestation type. By default EPID is supported.
# Supported attestation types are EPID and DCAP
attestation_type = "EPID"

# TEE enclave library to use.
enclave_library = "libavalon-kme-enclave.signed.so"
enclave_library_path = "tc/sgx/trusted_worker_manager/enclave/build/lib/"

num_of_enclaves = "1"
# MRENCLAVE for WPE that will be allowed to register with this KME
# is read from a file. This file is generated using a script after
# the WPE enclave has been built.
wpe_mrenclave_read_from_file = "wpe_mr_enclave.txt"

# Sealed data from trusted enclave is stored at this location for recovery
# in case of abrubt shutdown.
sealed_data_path = ".sealed/.sealed.data"

# ------------------------------------------------------------
# Epid attestation data
# ------------------------------------------------------------
[EpidAttestation]
# Service Provider ID (SPID) is a 32-digit hex string tied to the
# enclave implementation. Replace dummy SPID with value obtained after
# subscription to run TCS in Intel SGX HW mode.
spid = "DEADBEEF00000000DEADBEEF00000000"

# ias_url is the URL of the Intel Attestation Service (IAS) server.
ias_url = "https://api.trustedservices.intel.com/sgx/dev"

# Proxy for https. Leave commented out for direct Internet connections or
# uncomment and change to your corporate proxy.
#https_proxy = "http://your-proxy:your-port/"

# IAS API key is a 32-digit hex string subscription key used for authentication
# of requests submitted to the IAS server. Obtain the key by subscribing in
# the portal https://api.portal.trustedservices.intel.com/
ias_api_key = "112233445566778899aabbccddeeff00"

# ------------------------------------------------------------
# DCAP attestation data
# ------------------------------------------------------------
[DcapAttestation]
# pccs_url is the URL of the Intel hosted Provisioning Certification Service(PCS server).
pccs_url = "https://avalon-pccs:8081/sgx/certification/v3/"

# Proxy for https. Leave commented out for direct Internet connections or
# uncomment and change to your corporate proxy.
#https_proxy = "http://your-proxy:your-port/"

# PCCS API key is a 32-digit hex string subscription key used for authentication
# of requests submitted to the PCS server. Obtain the key by subscribing in
# the portal https://api.portal.trustedservices.intel.com/
pccs_api_key = "00aaaabbbbccccddddccccbbbbaaaa00"

[KMEListener]
# URL of KMEListener where a Work order processor can send requests meant for
# the Key Management Enclave(KME). This config can be overridden by passing a
# command line argument using --bind option when starting the kme.
bind = "http://localhost:1948"

[KvStorage]
# the remote version is of higher priority if enabled
remote_url = "http://localhost:9090"

# -------------------------------------------------------------
# TCS Worker configuration details
# -------------------------------------------------------------

[WorkerConfig]
# Id of worker in plain text. This can be overridden by passing values in command line for
# enclave manager using --worker_id option.
worker_id = "kme-worker-1"
ProofDataType = "TEE-SGX-IAS"

# The Following URIs are used in direct model to submit work orders in
# synchronous, asynchronous, pull and notification modes.
WorkOrderSyncUri = ""
WorkOrderAsyncUri = ""
WorkOrderPullUri = ""
WorkOrderNotifyUri = ""
# Deployed address of Work order invocation smart contract used in proxy model
WorkOrderInvocationAddress = ""
# Work Order Receipt smart contract used in proxy model
ReceiptInvocationAddress = ""
# Ethereum Address used by the worker to submit transactions
FromAddress = ""
# Replace ApplicationTypeId and OrganizationId with real hexadecimal values, 64 characters
# longs. As per EEA spec v1.1, they are bytes32 which effectively is 64 hex characters.
ApplicationTypeId = "11aa22bb33cc44dd11aa22bb33cc44dd11aa22bb33cc44dd11aa22bb33cc44dd"
OrganizationId = "aabbcc1234ddeeffaabbcc1234ddeeffaabbcc1234ddeeffaabbcc1234ddeeff"


# URI used by worker to process work order receipts
ReceiptInvocationUri = ""

# Optional - Comma separated list of Hashing algorithms. Default is SHA-256
HashingAlgorithm = "SHA-256"
# Optional - Comma separated list of signing algorithms. Default is SECP256K1
SigningAlgorithm = "SECP256K1"
# Asymmetric encryption algorithm used to encrypt Symmetric data encryption key.
# Default is RSA-OAEP-3072
KeyEncryptionAlgorithm = "RSA-OAEP-3072"
# Comma separated list of encryption algorithms. Default is AES-GCM-256
DataEncryptionAlgorithm = "AES-GCM-256"
# Supported work order formats are JSON-RPC, JSON-RPC-JWT, and Custom format
# starting with tilde "~"
workOrderPayloadFormats = "JSON-RPC"
