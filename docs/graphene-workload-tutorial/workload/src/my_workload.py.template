#!/usr/bin/python3

# Copyright 2020 Intel Corporation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
import sys
import logging
from avalon_worker.workload.workload import WorkLoad

logger = logging.getLogger(__name__)
logger.setLevel(logging.DEBUG)
logger.addHandler(logging.StreamHandler(sys.stdout))

# -------------------------------------------------------------------------


class {{ My_workload }}WorkLoad(WorkLoad):
    """
    This is an example workload.
    """

# -------------------------------------------------------------------------

    def execute(self, in_data_array):
        """
        Executes {{ My_workload }} workload.
        Parameters :
            in_data_array: Input data array containing data in plain bytes
        Returns :
            status as boolean and output result in bytes.
        """
        logger.info("Execute {{ My_workload }} workload")
        data_plain_bytes = in_data_array[0]["data"]
        try:
            out_msg_bytes = self._{{ my_workload }}(data_plain_bytes)
            result = True
        except Exception as e:
            out_msg = "Error executing workload : " + str(e)
            out_msg_bytes = out_msg.encode("utf-8")
            logger.error(out_msg)
            result = False
        return result, out_msg_bytes

# -------------------------------------------------------------------------

    def _{{ my_workload }}(self, input_bytes):
        """
        Function containing the actual business logic 
        Parameters :
            input_bytes: Input(in bytes) passed in
        Returns :
            output_bytes: Output(in bytes) obtained after execution
        """
        # Validate input
        
        # Execution logic

        # Return outcome of execution
        # return output_bytes

# -------------------------------------------------------------------------
