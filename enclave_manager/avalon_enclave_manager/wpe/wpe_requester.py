#!/usr/bin/env python3

# Copyright 2020 Intel Corporation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import sys
import json
import random
import logging
import argparse

import config.config as pconfig
import utility.logger as plogger
from http_client.http_jrpc_client import HttpJrpcClient

logger = logging.getLogger(__name__)


class WPERequester():
    """
    JRPC requester acting on behalf of WorkOrderProcessorEnclaveManager
    """

    def __init__(self, config):
        """
        Constructor for WPERequester. Initialize the HTTP jrpc client.
        Parameters :
            config - dict of config read
        """
        self._uri_client = HttpJrpcClient(config["KMEListener"]["bind"])

    def get_unique_verification_key(self, nonce):
        """
        Request wrapper to get a unique id from the KME

        Parameters :
            nonce - Random hex nonce generated by this WPE
        Returns :
            response - Response received from the KME which includes
                       the public verification key which is supposed
                       to be included in REPORTDATA by the WPE.
        """
        json_rpc_request = self._get_request_json("kme_uid")
        json_rpc_request["params"] = {"nonce": nonce}

        json_request_str = json.dumps(json_rpc_request)
        logging.debug("Request json %s", json_request_str)
        response = self._uri_client._postmsg(json_request_str)
        return response

    def register_wo_processor(self, attestation_report):
        """
        Request to register this WPE with the KME

        Parameters :
            attestation_report - The IAS attestation report or DCAP quote
        Returns :
            response - Response received from the KME about the status of
                       registration

        """
        json_rpc_request = self._get_request_json("kme_reg")
        json_rpc_request["params"] = attestation_report

        json_request_str = json.dumps(json_rpc_request)
        logging.debug("Request json %s", json_request_str)
        response = self._uri_client._postmsg(json_request_str)
        return response

    def preprocess_work_order(self, wo_request):
        """
        Request to preprocess a work order

        Parameters :
            wo_request - The original work order request and inWorkOrderExData
        Returns :
            response - Response from KME that includes the workorder key info
        """
        json_rpc_request = self._get_request_json("pre_process_wo")
        json_rpc_request["params"] = wo_request

        json_request_str = json.dumps(json_rpc_request)
        logging.debug("Request json %s", json_request_str)
        response = self._uri_client._postmsg(json_request_str)
        return response

    def _get_request_json(self, method):
        """
        Helper method to synthesize jrpc request JSON

        Parameters :
            method - JRPC method to be set in the method field
        Returns :
            A dict representing the basic request JSON
        """
        return {
            "jsonrpc": "2.0",
            "method": method,
            "id": random.randint(0, 100000)
        }
